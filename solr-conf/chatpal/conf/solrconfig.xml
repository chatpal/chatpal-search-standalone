<?xml version="1.0" encoding="UTF-8"?>
<config>
    <luceneMatchVersion>6.6.0</luceneMatchVersion>
    <dataDir>${solr.data.dir:}</dataDir>

    <!-- Solr Cell Plugins
+    -->
    <lib dir="${solr.install.dir:../../..}/contrib/extraction/lib" regex=".*\.jar" />
    <lib dir="${solr.install.dir:../../..}/dist/" regex="solr-cell-\d.*\.jar" />
    <!-- The DirectoryFactory to use for indexes.

         solr.StandardDirectoryFactory is filesystem
         based and tries to pick the best implementation for the current
         JVM and platform.  solr.NRTCachingDirectoryFactory, the default,
         wraps solr.StandardDirectoryFactory and caches small files in memory
         for better NRT performance.

         One can force a particular implementation via solr.MMapDirectoryFactory,
         solr.NIOFSDirectoryFactory, or solr.SimpleFSDirectoryFactory.

         solr.RAMDirectoryFactory is memory based, not
         persistent, and doesn't work with replication.
    -->
    <directoryFactory name="DirectoryFactory"
                      class="${solr.directoryFactory:solr.NRTCachingDirectoryFactory}"/>

    <!-- The CodecFactory for defining the format of the inverted index.
         The default implementation is SchemaCodecFactory, which is the official Lucene
         index format, but hooks into the schema to provide per-field customization of
         the postings lists and per-document values in the fieldType element
         (postingsFormat/docValuesFormat). Note that most of the alternative implementations
         are experimental, so if you choose to customize the index format, its a good
         idea to convert back to the official format e.g. via IndexWriter.addIndexes(IndexReader)
         before upgrading to a newer version to avoid unnecessary reindexing.
    -->
    <codecFactory class="solr.SchemaCodecFactory"/>

    <!-- Classic schema.xml
    -->
    <schemaFactory class="ClassicIndexSchemaFactory"/>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         Index Config - These settings control low-level behavior of indexing
         Most example settings here show the default value, but are commented
         out, to more easily see where customizations have been made.

         Note: This replaces <indexDefaults> and <mainIndex> from older versions
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <indexConfig>

        <!-- LockFactory

             More details on the nuances of each LockFactory...
             http://wiki.apache.org/lucene-java/AvailableLockFactories
        -->
        <lockType>${solr.lock.type:native}</lockType>

        <!-- Lucene Infostream

             To aid in advanced debugging, Lucene provides an "InfoStream"
             of detailed information when indexing.

             Setting the value to true will instruct the underlying Lucene
             IndexWriter to write its info stream to solr's log. By default,
             this is enabled here, and controlled through log4j.properties.
        -->
        <infoStream>true</infoStream>

    </indexConfig>

    <!-- JMX

         This example enables JMX if and only if an existing MBeanServer
         is found, use this if you want to configure JMX through JVM
         parameters. Remove this to disable exposing Solr configuration
         and statistics to JMX.

         For more details see http://wiki.apache.org/solr/SolrJmx
    -->
    <jmx/>

    <!-- The default high-performance update handler -->
    <updateHandler class="solr.DirectUpdateHandler2">

        <!-- Enables a transaction log, used for real-time get, durability, and
             and solr cloud replica recovery.  The log can grow as big as
             uncommitted changes to the index, so use of a hard autoCommit
             is recommended (see below).
             "dir" - the target directory for transaction logs, defaults to the
             solr data directory.  -->
        <updateLog>
            <str name="dir">${solr.ulog.dir:}</str>
        </updateLog>

        <!-- AutoCommit

             Perform a hard commit automatically under certain conditions.
             Instead of enabling autoCommit, consider using "commitWithin"
             when adding documents.

             http://wiki.apache.org/solr/UpdateXmlMessages

             maxDocs - Maximum number of documents to add since the last
             commit before automatically triggering a new commit.

             maxTime - Maximum amount of time in ms that is allowed to pass
             since a document was added before automatically
             triggering a new commit.
             openSearcher - if false, the commit causes recent index changes
             to be flushed to stable storage, but does not cause a new
             searcher to be opened to make those changes visible.

             If the updateLog is enabled, then it's highly recommended to
             have some sort of hard autoCommit to limit the log size.
        -->
        <autoCommit>
            <maxTime>10000</maxTime>
            <openSearcher>false</openSearcher>
        </autoCommit>

        <!-- softAutoCommit is like autoCommit except it causes a
             'soft' commit which only ensures that changes are visible
             but does not ensure that data is synced to disk.  This is
             faster and more near-realtime friendly than a hard commit.
        -->
        <autoSoftCommit>
            <maxDocs>100</maxDocs>
            <maxTime>1000</maxTime>
        </autoSoftCommit>

        <commitWithin/>

    </updateHandler>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         Query section - these settings control query time things like caches
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <query>
        <!-- Max Boolean Clauses

             Maximum number of clauses in each BooleanQuery,  an exception
             is thrown if exceeded.

             ** WARNING **

             This option actually modifies a global Lucene property that
             will affect all SolrCores.  If multiple solrconfig.xml files
             disagree on this property, the value at any given moment will
             be based on the last SolrCore to be initialized.

        -->
        <maxBooleanClauses>1024</maxBooleanClauses>

        <!-- Solr Internal Query Caches

             There are two implementations of cache available for Solr,
             LRUCache, based on a synchronized LinkedHashMap, and
             FastLRUCache, based on a ConcurrentHashMap.

             FastLRUCache has faster gets and slower puts in single
             threaded operation and thus is generally faster than LRUCache
             when the hit ratio of the cache is high (> 75%), and may be
             faster under other scenarios on multi-cpu systems.
        -->
        <!-- Filter Cache

             Cache used by SolrIndexSearcher for filters (DocSets),
             unordered sets of *all* documents that match a query.  When a
             new searcher is opened, its caches may be prepopulated or
             "autowarmed" using data from caches in the old searcher.
             autowarmCount is the number of items to prepopulate.  For
             LRUCache, the autowarmed items will be the most recently
             accessed items.

             Parameters:
             class - the SolrCache implementation LRUCache or
             (LRUCache or FastLRUCache)
             size - the maximum number of entries in the cache
             initialSize - the initial capacity (number of entries) of
             the cache.  (see java.util.HashMap)
             autowarmCount - the number of entries to prepopulate from
             and old cache.
        -->
        <filterCache class="solr.FastLRUCache"
                     size="512"
                     initialSize="512"
                     autowarmCount="0"/>

        <!-- Query Result Cache

             Caches results of searches - ordered lists of document ids
             (DocList) based on a query, a sort, and the range of documents requested.
        -->
        <queryResultCache class="solr.LRUCache"
                          size="512"
                          initialSize="512"
                          autowarmCount="0"/>

        <!-- Document Cache

             Caches Lucene Document objects (the stored fields for each
             document).  Since Lucene internal document ids are transient,
             this cache will not be autowarmed.
        -->
        <documentCache class="solr.LRUCache"
                       size="512"
                       initialSize="512"
                       autowarmCount="0"/>

        <!-- custom cache currently used by block join -->
        <cache name="perSegFilter"
               class="solr.search.LRUCache"
               size="10"
               initialSize="0"
               autowarmCount="10"
               regenerator="solr.NoOpRegenerator"/>

        <!-- Lazy Field Loading

             If true, stored fields that are not requested will be loaded
             lazily.  This can result in a significant speed improvement
             if the usual case is to not load all stored fields,
             especially if the skipped fields are large compressed text
             fields.
        -->
        <enableLazyFieldLoading>true</enableLazyFieldLoading>

        <!-- Result Window Size

             An optimization for use with the queryResultCache.  When a search
             is requested, a superset of the requested number of document ids
             are collected.  For example, if a search for a particular query
             requests matching documents 10 through 19, and queryWindowSize is 50,
             then documents 0 through 49 will be collected and cached.  Any further
             requests in that range can be satisfied via the cache.
        -->
        <queryResultWindowSize>20</queryResultWindowSize>

        <!-- Maximum number of documents to cache for any entry in the
             queryResultCache.
        -->
        <queryResultMaxDocsCached>200</queryResultMaxDocsCached>

        <!-- Query Related Event Listeners

             Various IndexSearcher related events can trigger Listeners to
             take actions.

             newSearcher - fired whenever a new searcher is being prepared
             and there is a current searcher handling requests (aka
             registered).  It can be used to prime certain caches to
             prevent long request times for certain requests.

             firstSearcher - fired whenever a new searcher is being
             prepared but there is no current registered searcher to handle
             requests or to gain autowarming data from.


        -->
        <!-- QuerySenderListener takes an array of NamedList and executes a
             local query request for each NamedList in sequence.
        -->
        <listener event="newSearcher" class="solr.QuerySenderListener">
            <arr name="queries">
            </arr>
        </listener>
        <listener event="firstSearcher" class="solr.QuerySenderListener">
            <arr name="queries">
                <lst>
                    <str name="q">static firstSearcher warming in solrconfig.xml</str>
                </lst>
            </arr>
        </listener>

        <!-- Use Cold Searcher

             If a search request comes in and there is no current
             registered searcher, then immediately register the still
             warming searcher and use it.  If "false" then all requests
             will block until the first searcher is done warming.
        -->
        <useColdSearcher>false</useColdSearcher>

        <!-- Max Warming Searchers

             Maximum number of searchers that may be warming in the
             background concurrently.  An error is returned if this limit
             is exceeded.

             Recommend values of 1-2 for read-only slaves, higher for
             masters w/o cache warming.
        -->
        <maxWarmingSearchers>2</maxWarmingSearchers>
    </query>

    <!-- Request Dispatcher

         This section contains instructions for how the SolrDispatchFilter
         should behave when processing requests for this SolrCore.

         handleSelect is a legacy option that affects the behavior of requests
         such as /select?qt=XXX

         handleSelect="true" will cause the SolrDispatchFilter to process
         the request and dispatch the query to a handler specified by the
         "qt" param, assuming "/select" isn't already registered.

         handleSelect="false" will cause the SolrDispatchFilter to
         ignore "/select" requests, resulting in a 404 unless a handler
         is explicitly registered with the name "/select"

         handleSelect="true" is not recommended for new users, but is the default
         for backwards compatibility
    -->
    <requestDispatcher handleSelect="false">

        <!-- Request Parsing

             These settings indicate how Solr Requests may be parsed, and
             what restrictions may be placed on the ContentStreams from
             those requests

             enableRemoteStreaming - enables use of the stream.file
             and stream.url parameters for specifying remote streams.

             multipartUploadLimitInKB - specifies the max size (in KiB) of
             Multipart File Uploads that Solr will allow in a Request.

             formdataUploadLimitInKB - specifies the max size (in KiB) of
             form data (application/x-www-form-urlencoded) sent via
             POST. You can use POST to pass request parameters not
             fitting into the URL.

             addHttpRequestToContext - if set to true, it will instruct
             the requestParsers to include the original HttpServletRequest
             object in the context map of the SolrQueryRequest under the
             key "httpRequest". It will not be used by any of the existing
             Solr components, but may be useful when developing custom
             plugins.

             *** WARNING ***
             The settings below authorize Solr to fetch remote files, You
             should make sure your system has some authentication before
             using enableRemoteStreaming="true"

        -->
        <requestParsers enableRemoteStreaming="false"
                        enableStreamBody="true"
                        multipartUploadLimitInKB="2048000"
                        formdataUploadLimitInKB="2048"
                        addHttpRequestToContext="true"/>

        <!-- HTTP Caching

             Set HTTP caching related parameters (for proxy caches and clients).

             The options below instruct Solr not to output any HTTP Caching
             related headers
        -->
        <httpCaching never304="true"/>

    </requestDispatcher>

    <!-- Request Handlers

         http://wiki.apache.org/solr/SolrRequestHandler

         Incoming queries will be dispatched to a specific handler by name
         based on the path specified in the request.

         Legacy behavior: If the request path uses "/select" but no Request
         Handler has that name, and if handleSelect="true" has been specified in
         the requestDispatcher, then the Request Handler is dispatched based on
         the qt parameter.  Handlers without a leading '/' are accessed this way
         like so: http://host/app/[core/]select?qt=name  If no qt is
         given, then the requestHandler that declares default="true" will be
         used or the one named "standard".

         If a Request Handler is declared with startup="lazy", then it will
         not be initialized until the first request that uses it.

    -->
    <requestHandler name="/select" class="solr.SearchHandler">
        <lst name="defaults">
            <str name="df">context</str>
        </lst>
    </requestHandler>

    <!-- HERE COME THE PUBLIC ENDPOINTS -->

    <!-- SEARCH handler used by chatpal-search -->
    <requestHandler name="/chatpal/search" class="io.chatpal.solr.ext.handler.ChatpalSearchRequestHandler">
        <lst name="defaults">
            <str name="defType">edismax</str>
            <str name="df">context</str>
            <str name="fl">_id:id,type,rid,mid,user,created,updated,text,score,user_username,user_name,user_email,room_name,room_topic,room_description,room_announcement,file_name,file_desc,file_type,file_link,file_store,file_size</str>

            <str name="wt">json</str>
            <str name="json.nl">map</str>

            <str name="hl">true</str>
            <str name="hl.method">default</str>

            <str name="echoParams">none</str>
            <str name="debug">false</str>
            <!--<str name="mm">2</str>-->
        </lst>
        <lst name="message">
            <str name="hl.fl">context,text_*</str>
            <bool name="hl.defaultSummary">true</bool>
            <str name="hl.alternateField">context</str>
            <str name="df">context</str>
        </lst>
        <lst name="user">
            <str name="hl.fl">user_*</str>
            <str name="qf">user_username^2 user_name user_email</str>
            <str name="df">context</str>
        </lst>
        <lst name="room">
            <str name="hl.fl">room_*</str>
            <str name="qf">room_name^3 room_topic^2 room_description room_announcement</str>
            <str name="df">context</str>
        </lst>
        <lst name="file">
            <str name="hl.fl">file_name,file_desc,text_*</str>
            <int name="hl.maxAnalyzedChars">51200</int> <!-- Matches located after this length will be found but not highlighted! -->
            <str name="qf">file_name^3 file_desc^2 file_type file_store text_none</str>
            <str name="df">context</str>
        </lst>
    </requestHandler>

    <!-- UPDATE handler used by chatpal-search -->
    <requestHandler name="/chatpal/update" class="solr.UpdateRequestHandler" >
        <lst name="invariants">
            <str name="update.chain">chatpal</str>
            <str name="stream.contentType">application/json</str>
            <str name="json.command">false</str>
        </lst>
    </requestHandler>

    <!-- File extraction endpoint using Tika -->
    <requestHandler name="/chatpal/update/extract" startup="lazy" class="solr.extraction.ExtractingRequestHandler" >
        <lst name="defaults">
            <str name="update.chain">chatpal</str>
            <str name="captureAttr">true</str>
            <str name="lowernames">false</str>
            <str name="literalsOverride">true</str>
            <str name="literal.type">file</str>
            <str name="fmap.content">text_none</str>
            <str name="uprefix">ignored_</str>
        </lst>
    </requestHandler>
    <!-- CLEAR handler used by chatpal-search -->
    <requestHandler name="/chatpal/clear" class="solr.UpdateRequestHandler" >
        <lst name="invariants">
            <str name="stream.contentType">application/json</str>
            <str name="json.command">true</str>
            <bool name="commit">true</bool>
        </lst>
    </requestHandler>

    <!-- PING handler used by chatpal-search -->
    <requestHandler name="/chatpal/ping" class="io.chatpal.solr.ext.handler.ChatpalPingRequestHandler">
        <lst name="invariants">
            <str name="qt">/chatpal/search</str><!-- handler to delegate to -->
            <str name="q">ping</str>
            <str name="action">ping</str>
            <str name="omitHeader">true</str>
        </lst>
    </requestHandler>

    <!-- SUGGEST !!BETA!! -->
    <requestHandler name="/chatpal/suggest" class="io.chatpal.solr.ext.handler.SuggestionRequestHandler">
    </requestHandler>

    <!-- END OF THE PUBLIC ENDPOINTS -->

    <requestHandler name="/analysis/field" startup="lazy" class="solr.FieldAnalysisRequestHandler"/>

    <!-- WRITERS -->
    <queryResponseWriter name="json" class="solr.JSONResponseWriter"/>

    <!-- COMPONENTS -->
    <searchComponent name="spellcheck" class="solr.SpellCheckComponent">
        <str name="queryAnalyzerFieldType">text_general</str>
        <lst name="spellchecker">
            <str name="name">spellcheck</str>
            <str name="field">text</str>
            <str name="classname">solr.DirectSolrSpellChecker</str>
            <!-- the spellcheck distance measure used, the default is the internal levenshtein -->
            <str name="distanceMeasure">internal</str>
            <!-- minimum accuracy needed to be considered a valid spellcheck suggestion -->
            <float name="accuracy">0.5</float>
            <!-- the maximum #edits we consider when enumerating terms: can be 1 or 2 -->
            <int name="maxEdits">2</int>
            <!-- the minimum shared prefix when enumerating terms -->
            <int name="minPrefix">1</int>
            <!-- maximum number of inspections per result. -->
            <int name="maxInspections">5</int>
            <!-- minimum length of a query term to be considered for correction -->
            <int name="minQueryLength">4</int>
            <!-- maximum threshold of documents a query term can appear to be considered for correction -->
            <float name="maxQueryFrequency">0.01</float>
            <!-- uncomment this to require suggestions to occur in 1% of the documents
                   <float name="thresholdTokenFrequency">.01</float>
              -->
        </lst>
    </searchComponent>

    <!-- UPDATE PROCESSORS -->
    <updateRequestProcessorChain name="chatpal">
        <processor class="io.chatpal.solr.ext.update.processor.IdGenerationFieldUpdateProcessorFactory">
            <str name="targetField">uid</str>
            <str name="pattern">{type}_{id}</str>
        </processor>
        <processor class="io.chatpal.solr.ext.update.processor.LanguageFieldUpdateProcessorFactory">
            <str name="source">text</str>
            <str name="target">text_</str>
        </processor>

        <processor class="TrimFieldUpdateProcessorFactory" />
        <processor class="solr.LogUpdateProcessorFactory" />
        <processor class="solr.DistributedUpdateProcessorFactory" />
        <processor class="solr.RunUpdateProcessorFactory" />
    </updateRequestProcessorChain>

    <chatpal>
        <generalSearch>
            <enabled>${chatpal.generalSearch:true}</enabled>
        </generalSearch>
        <fileSearch>
            <enabled>${chatpal.fileSearch:true}</enabled>
            <maxFileSize>${chatpal.fileSearch.maxFileSize:20971520}</maxFileSize>
        </fileSearch>
    </chatpal>

    <admin>
        <defaultQuery>*:*</defaultQuery>
    </admin>
</config>
